Module Common
{
	// Obsolete. Will be removed in a future release.
	LegacyEntity Permission 'Common.RolePermission'
	{
		Reference Role Common.Role { Required; LegacyProperty 'RoleID' 'Common.Role' 'ID'; }
		Reference Claim Common.Claim { Required; LegacyProperty 'ClaimID' 'Common.Claim' 'ID'; }
		Bool IsAuthorized { Required; }
		
		SqlDependsOn Common.RolePermission;
	}
	
	// Adding ASP.NET user ID to the existing Common.Principal from CommonConcepts package.
    Entity Principal
    {
        Integer AspNetUserId { SystemRequired; Unique; } // Automatically generated, see SqlTrigger GenerateAspNetUserId.
    }
    
	// ASP.NET SimpleMembershipProvider requires the user table (view) to be in the dbo schema.
    SqlObject aspnet_Principal 
        'CREATE VIEW dbo.aspnet_Principal AS SELECT * FROM Common.Principal'
        'DROP VIEW dbo.aspnet_Principal'
    {
        SqlDependsOn Common.Principal;
    }
    
	// The trigger generates unique AspNetUserId that does not exist in webpages_Membership nor Principal.
    SqlTrigger Principal.'GenerateAspNetUserId' 'INSTEAD OF INSERT'
        "DECLARE @Error INT;
        
        SELECT * INTO #t FROM inserted;

        INSERT INTO Common.Principal SELECT * FROM #t WHERE AspNetUserId IS NOT NULL;
        SET @Error = @@ERROR IF @Error > 0 BEGIN ROLLBACK TRANSACTION RETURN END

        DELETE FROM #t WHERE AspNetUserId IS NOT NULL;

        DECLARE @lastId INTEGER;
        IF OBJECT_ID('webpages_Membership') IS NOT NULL
        BEGIN
            EXEC @Error = sp_executesql
                N'SELECT @lastId = ISNULL(MAX(AspNetUserId), 0)
                    FROM (SELECT AspNetUserId FROM Common.Principal
                        UNION ALL SELECT UserId FROM webpages_Membership) x', N'@lastId INTEGER OUTPUT', @lastId OUTPUT;
            SET @Error = ISNULL(NULLIF(@Error, 0), @@ERROR) IF @Error > 0 BEGIN ROLLBACK TRANSACTION RAISERROR('Error finding maximal AspNetUserId.',16,10) RETURN END;
        END
        ELSE
            SELECT @lastId = ISNULL(MAX(AspNetUserId), 0) FROM Common.Principal;

        SELECT ID, GeneratedId = @lastId + ROW_NUMBER() OVER (ORDER BY Name)
        INTO #PrincipalNewId
        FROM #t WHERE AspNetUserId IS NULL;

        UPDATE #t
        SET AspNetUserId = pni.GeneratedId
        FROM #t
        INNER JOIN #PrincipalNewId pni ON pni.ID = #t.ID
        WHERE #t.AspNetUserId IS NULL;

        INSERT INTO Common.Principal SELECT * FROM #t;
        SET @Error = @@ERROR IF @Error > 0 BEGIN ROLLBACK TRANSACTION RETURN END";
}
